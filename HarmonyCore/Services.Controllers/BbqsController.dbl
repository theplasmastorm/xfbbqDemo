;;*****************************************************************************
;;
;; Title:       BbqsController.dbl
;;
;; Description: OData controller for the BBQ structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {ApiVersion("1")}
    {ODataRoutePrefix("Bbqs")}
    ;;; <summary>
    ;;; OData controller for Bbqs
    ;;; </summary>
    public partial class BbqsController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of BbqsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method BbqsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Bbq>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Bbqs
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetBbqs, @IActionResult
        proc
            mreturn Ok(_DbContext.Bbqs.AsNoTracking())
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Bbq),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Bbq by primary key.
        ;;; </summary>
        ;;; <param name="aId">ID of BBQ</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetBbq, @SingleResult<Bbq>
            {FromODataUri}
            required in aId, int
        proc
            mreturn new SingleResult<Bbq>(_DbContext.Bbqs.AsNoTracking().FindQuery<Bbq>(_DbContext, aId))
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Bbq),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {HttpPost}
        ;;; <summary>
        ;;; Create a new bbq (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostBbq, @IActionResult
            {FromBody}
            required in aBbq, @Bbq
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Get the next available primary key value
            disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            KeyFactory.AssignPrimaryKey(aBbq)

            ;;Add the new bbq
            try
            begin
                _DbContext.Bbqs.Add(aBbq)
                _DbContext.SaveChanges(keyFactory)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn Created(aBbq)

        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a bbq.
        ;;; </summary>

        ;;; <param name="aId">ID of BBQ</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutBbq, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aBbq, @Bbq
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aBbq.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Bbqs.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Bbqs.Add(aBbq)
                    _DbContext.SaveChanges()
                    mreturn Created(aBbq)
                end
                else
                begin
                    aBbq.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a bbq.
        ;;; </summary>
        ;;; <param name="aId">ID of BBQ</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchBbq, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aBbq, @JsonPatchDocument<Bbq>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing bbq
            try
            begin
                ;;Get the bbq to be updated
                data bbqToUpdate = _DbContext.Bbqs.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(bbqToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the bbq we read
                aBbq.ApplyTo(bbqToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Bbqs.Update(bbqToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
    endclass

endnamespace