import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models
import System.Linq
import System.Net.Http
import System.Net
import System.Collections.Specialized
import System.Text

namespace Services.Controllers
    class CaptchaReturn
        public readwrite property success, boolean
    endclass

    public partial class UsersController extends ODataController
        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(User),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        ;;; <summary>
        ;;; Create a new user (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostUser, @IActionResult
            {FromBody}
            required in aUser, @User
        proc
            ;; Validate Google reCAPTCHA serverside
            disposable data client = new WebClient()
            data values = new NameValueCollection()
            values["secret"] ="6LexFawZAAAAANfcuNysZK4IYkSS0UHt3d_KTMkU"
            values["response"] = HttpContext.Request.Headers["x-response"].ToString()
            data response = client.UploadValues("https://www.google.com/recaptcha/api/siteverify", values)
            data responseString = Encoding.Default.GetString(response)
            data responseObject = JsonConvert.DeserializeObject<CaptchaReturn>(responseString)

            if (responseObject.success) then
            begin
                ;;Remove the primary key fields from ModelState
                ModelState.Remove("Id")

                ;; Validate inbound data
                if (!ModelState.IsValid)
                    mreturn ValidationHelper.ReturnValidationError(ModelState)

                ;;Get the next available primary key value
                disposable data keyFactory = (@IPrimaryKeyFactory)_ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
                KeyFactory.AssignPrimaryKey(aUser)

                ;;Add the new user
                try
                begin
                    _DbContext.Users.Add(aUser)
                    _DbContext.SaveChanges(keyFactory)
                end
                
                catch (e, @ValidationException)
                begin
                    ModelState.AddModelError("RelationValidation",e.Message)
                    mreturn ValidationHelper.ReturnValidationError(ModelState)
                end
                endtry
            end
            else
            begin 
                mreturn BadRequest()
            end
            mreturn Created(aUser)
		endmethod

		{ODataRoute("(Id={aId})")}
		{ProducesResponseType(StatusCodes.Status204NoContent)}
		{ProducesResponseType(StatusCodes.Status404NotFound)}
		{HttpDelete}
		;;; <summary>
		;;; Delete a user.
		;;; </summary>
		;;; <param name="aId">ID of user</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method DeleteUser, @IActionResult
			{FromODataUri}
			required in aId, int
		proc
			;;Get the user to be deleted
			data userToRemove = _DbContext.Users.Find(aId)

			;;Did we find it?
			if (userToRemove == ^null)
				mreturn NotFound()

			;;Delete all their favorites
			data favoritesByUser = _DbContext.Favorites.AsNoTracking().FindAlternate("Userid",aId)
			data favorite, @Favorite
			foreach favorite in favoritesByUser
			begin
				_DbContext.Favorites.Remove(favorite)
			end

			;;Delete all their orders
			data ordersByUser = _DbContext.Orders.AsNoTracking().FindAlternate("Userid",aId)
			data order, @Order
			foreach order in ordersByUser
			begin
				_DbContext.Orders.Remove(order)
			end

			;;Delete and commit
			_DbContext.Users.Remove(userToRemove)
			_DbContext.SaveChanges()

			mreturn NoContent()

		endmethod
    endclass
endnamespace