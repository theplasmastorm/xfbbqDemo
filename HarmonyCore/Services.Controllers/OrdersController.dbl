;;*****************************************************************************
;;
;; Title:       OrdersController.dbl
;;
;; Description: OData controller for the ORDER structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Authorization
import Microsoft.AspNetCore.Http
import Microsoft.OData
import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Microsoft.Extensions.Options
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Harmony.AspNetCore
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    {Authorize}
    {ApiVersion("1")}
    {ODataRoutePrefix("Orders")}
    ;;; <summary>
    ;;; OData controller for Orders
    ;;; </summary>
    public partial class OrdersController extends ODataController
    
        ;;Services provided via dependency injection
        private _DbContext, @Services.Models.DBContext
        private _ServiceProvider, @IServiceProvider
        private _AppSettings, @IOptions<AppSettings>

        ;;; <summary>
        ;;; Constructs a new instance of OrdersController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method OrdersController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
            aAppSettings, @IOptions<AppSettings>
        proc
            this._DbContext = aDbContext
            this._ServiceProvider = aServiceProvider
            this._AppSettings = aAppSettings
        endmethod

        {ODataRoute}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Order>>),StatusCodes.Status200OK)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Orders
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrders, @IActionResult
        proc
            mreturn Ok(_DbContext.Orders.AsNoTracking())
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(Order),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Order by primary key.
        ;;; </summary>
        ;;; <param name="aId">ID of order</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrder, @SingleResult<Order>
            {FromODataUri}
            required in aId, int
        proc
            mreturn new SingleResult<Order>(_DbContext.Orders.AsNoTracking().FindQuery<Order>(_DbContext, aId))
        endmethod

        {ODataRoute("(Userid={aUserid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Order>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orders by alternate key key Userid.
        ;;; </summary>
        ;;; <param name="aUserid">ID of user who ordered</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrdersByUserid, @IActionResult
            {FromODataUri}
            required in aUserid, int
        proc
            data result = _DbContext.Orders.AsNoTracking().FindAlternate("Userid",aUserid)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(Bbqid={aBbqid})")}
        {Produces("application/json")}
        {ProducesResponseType(^typeof(ODataValue<IEnumerable<Order>>),StatusCodes.Status200OK)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orders by alternate key key Bbqid.
        ;;; </summary>
        ;;; <param name="aBbqid">ID of BBQ this order pertains to</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrdersByBbqid, @IActionResult
            {FromODataUri}
            required in aBbqid, int
        proc
            data result = _DbContext.Orders.AsNoTracking().FindAlternate("Bbqid",aBbqid)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status201Created)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPut}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a order.
        ;;; </summary>

        ;;; <param name="aId">ID of order</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutOrder, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aOrder, @Order
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrder.Id = aId

            try
            begin
                ;;Add and commit
                data existing = _DbContext.Orders.Find(aId)
                if(existing == ^null) then
                begin
                    _DbContext.Orders.Add(aOrder)
                    _DbContext.SaveChanges()
                    mreturn Created(aOrder)
                end
                else
                begin
                    aOrder.CopyTo(existing)
                    _DbContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

        endmethod
        {ODataRoute("(Id={aId})")}
        {Produces("application/json")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status400BadRequest)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpPatch}
        ;;; <summary>
        ;;; Patch  (partial update) a order.
        ;;; </summary>
        ;;; <param name="aId">ID of order</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchOrder, @IActionResult
            {FromODataUri}
            required in aId, int
            {FromBody}
            required in aOrder, @JsonPatchDocument<Order>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn ValidationHelper.ReturnValidationError(ModelState)

            ;;Patch the existing order
            try
            begin
                ;;Get the order to be updated
                data orderToUpdate = _DbContext.Orders.Find(aId)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(orderToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the order we read
                aOrder.ApplyTo(orderToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                _DbContext.Orders.Update(orderToUpdate)
                _DbContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            catch (e, @ValidationException)
            begin
                ModelState.AddModelError("RelationValidation",e.Message)
                mreturn ValidationHelper.ReturnValidationError(ModelState)
            end
            endtry

            mreturn NoContent()

        endmethod
        {ODataRoute("(Id={aId})")}
        {ProducesResponseType(StatusCodes.Status204NoContent)}
        {ProducesResponseType(StatusCodes.Status404NotFound)}
        {HttpDelete}
        ;;; <summary>
        ;;; Delete a order.
        ;;; </summary>
        ;;; <param name="aId">ID of order</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteOrder, @IActionResult
            {FromODataUri}
            required in aId, int
        proc
            ;;Get the order to be deleted
            data orderToRemove = _DbContext.Orders.Find(aId)

            ;;Did we find it?
            if (orderToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            _DbContext.Orders.Remove(orderToRemove)
            _DbContext.SaveChanges()

            mreturn NoContent()

        endmethod
    endclass

endnamespace