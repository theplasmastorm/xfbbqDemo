;;*****************************************************************************
;;
;; Title:       EdmBuilder.dbl
;;
;; Description: Builds a Harmony Core Enterprise Data Model (EDM)
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.OData
import Microsoft.EntityFrameworkCore
import Microsoft.OData.Edm
import Microsoft.AspNet.OData.Builder
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNetCore.Mvc.Versioning.Conventions
import System.Collections.Generic
import Services.Models

namespace Services

    ;;; <summary>
    ;;; Builds an entity framework entity data model.
    ;;; </summary>
    public partial class EdmBuilder implements IEdmBuilder

        static method EdmBuilder
        proc
            CustomStaticEdmInit()

            if(mEdmVersions.Count == 0)
                mEdmVersions.Add(1)
        endmethod

        public method EdmBuilder
            serviceProvider, @IServiceProvider
        proc
            mServiceProvider = serviceProvider
        endmethod

        public virtual method BuildModel, @IEdmModel
            modelBuilder, @ODataModelBuilder 
            endparams
        proc
            mreturn GetEdmModel(modelBuilder, mServiceProvider)
        endmethod

        private mServiceProvider, @IServiceProvider
        private static mEdmModels, @Dictionary<int, IEdmModel>, new Dictionary<int, IEdmModel>()
        private static mEdmVersions, @List<int>, new List<int>()

        public static method GetEdmModel, @IEdmModel
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        proc
            if(!mEdmModels.ContainsKey(versionNumber))
            begin
                FillVersionedEdmModels(serviceProvider, versionNumber)

                if(!mEdmModels.ContainsKey(versionNumber))
                begin
                    data madeModel = GetEdmModel(new ODataConventionModelBuilder(serviceProvider), serviceProvider)
                    madeModel.SetAnnotationValue(madeModel, new ApiVersionAnnotation(ApiVersion.Parse(versionNumber.ToString())))
                    mEdmModels.Add(versionNumber, madeModel)
                end
            end
            mreturn mEdmModels[versionNumber]
        endmethod

        public static property EdmVersions, @IEnumerable<int>
            method get
            proc
                mreturn mEdmVersions
            endmethod
        endproperty

        private static partial method FillVersionedEdmModels, void
            required in serviceProvider, @IServiceProvider
            required in versionNumber, int
        endmethod

        private static partial method CustomStaticEdmInit, void
        
        endmethod

        ;;; <summary>
        ;;; Gets the entity data model.
        ;;; </summary>
        private static method GetEdmModel, @IEdmModel
            required in builder, @ODataModelBuilder
            required in serviceProvider, @IServiceProvider
        proc
            ;;Declare entities
            builder.EntitySet<Bbq>("Bbqs")
            builder.EntitySet<Order>("Orders")
            builder.EntitySet<User>("Users")
            builder.EntitySet<Favorite>("Favorites")

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.
 
            ;;-----------------------------------------------
            ;;If we have a GetEdmModelCustom method, call it 

            GetEdmModelCustom(serviceProvider, builder)

            ;;-----------------------------------------------

            data tempModel = (@EdmModel)builder.GetEdmModel()

            data bbqType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Bbq")
      
      

            data orderType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Order")
            tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"Userid",orderType.FindProperty("Userid")}})
            tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"Bbqid",orderType.FindProperty("Bbqid")}})

            data userType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.User")
      

            data favoriteType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Favorite")
            tempModel.AddAlternateKeyAnnotation(favoriteType, new Dictionary<string, IEdmProperty>() {{"Userid",favoriteType.FindProperty("Userid")}})

            ;;-----------------------------------------------
            ;;If we have a PostEdmModelCustom method, call it 

            PostEdmModelCustom(serviceProvider, tempModel)

            ;;-----------------------------------------------

            mreturn tempModel

        endmethod

        ;;Declare the GetEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method GetEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in builder, @ODataModelBuilder
        endmethod

        ;;Declare the PostEdmModelCustom partial method
        ;;This method can be implemented in a partial class to provide custom EDM configuration code
        partial static method PostEdmModelCustom, void
            required in serviceProvider, @IServiceProvider
            required in model, @EdmModel
        endmethod

    endclass

endnamespace