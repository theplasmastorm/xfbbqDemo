;;*****************************************************************************
;;
;; Title:       Bbq.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure BBQ and from the data file DAT:BBQ.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class Bbq extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strBbq
        private mOriginalSynergyData, strBbq

        private static sMetadata, @BbqMetadata

.region "Constructors"

        static method Bbq
        proc
            sMetadata = new BbqMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Bbq), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Bbq
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Bbq
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID of BBQ
        ;;; </summary>
        {Key}
        {Range(0,99999999, ErrorMessage="ID of BBQ must be between 0 and 99999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Timestamp of when BBQ was created
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage="Timestamp of when BBQ was created must be between 0 and 9999999999. ")}
        public property Creationdate, long
            method get
            proc
                mreturn (long)mSynergyData.creationdate
            endmethod
            method set
            proc
                mSynergyData.creationdate = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Timestamp of when BBQ is going tobe held
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage="Timestamp of when BBQ is going tobe held must be between 0 and 9999999999. ")}
        public property Helddate, long
            method get
            proc
                mreturn (long)mSynergyData.helddate
            endmethod
            method set
            proc
                mSynergyData.helddate = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[3]
        endmethod

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; BBQ.ID (one) <-> (many) ORDER.BBQID
        ;;; </summary>
        public readwrite property REL_Orders, @ICollection<Order>

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;If we have a ValidateCustom method, call it
            ValidateCustom(vType,sp)
        endmethod

        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""

.endregion

    endclass

endnamespace
