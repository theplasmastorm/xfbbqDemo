;;*****************************************************************************
;;
;; Title:       Favorite.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure FAVORITE and from the data file DAT:FAVORITE.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class Favorite extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strFavorite
        private mOriginalSynergyData, strFavorite

        private static sMetadata, @FavoriteMetadata

.region "Constructors"

        static method Favorite
        proc
            sMetadata = new FavoriteMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Favorite), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Favorite
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Favorite
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID of favorite
        ;;; </summary>
        {Key}
        {Range(0,99999999, ErrorMessage="ID of favorite must be between 0 and 99999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; What burger meat
        ;;; </summary>
        {Range(0,9, ErrorMessage="What burger meat must be between 0 and 9. ")}
        public property Meat, int
            method get
            proc
                mreturn (int)mSynergyData.meat
            endmethod
            method set
            proc
                mSynergyData.meat = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Amount of cheese slices
        ;;; </summary>
        {Range(0,9, ErrorMessage="Amount of cheese slices must be between 0 and 9. ")}
        public property Cheese, int
            method get
            proc
                mreturn (int)mSynergyData.cheese
            endmethod
            method set
            proc
                mSynergyData.cheese = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Temperature of burger meat
        ;;; </summary>
        {Range(0,9, ErrorMessage="Temperature of burger meat must be between 0 and 9. ")}
        public property Doneness, int
            method get
            proc
                mreturn (int)mSynergyData.doneness
            endmethod
            method set
            proc
                mSynergyData.doneness = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Pungency of burger
        ;;; </summary>
        {Range(0,9, ErrorMessage="Pungency of burger must be between 0 and 9. ")}
        public property Spicy, int
            method get
            proc
                mreturn (int)mSynergyData.spicy
            endmethod
            method set
            proc
                mSynergyData.spicy = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Hotdog type
        ;;; </summary>
        {Range(0,9, ErrorMessage="Hotdog type must be between 0 and 9. ")}
        public property Type, int
            method get
            proc
                mreturn (int)mSynergyData.type
            endmethod
            method set
            proc
                mSynergyData.type = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Amount of hotdogs
        ;;; </summary>
        {Range(0,9, ErrorMessage="Amount of hotdogs must be between 0 and 9. ")}
        public property Count, int
            method get
            proc
                mreturn (int)mSynergyData.count
            endmethod
            method set
            proc
                mSynergyData.count = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Whehter the hotdog is to be burnt or not
        ;;; </summary>
        {Range(0,9, ErrorMessage="Whehter the hotdog is to be burnt or not must be between 0 and 9. ")}
        public property Burnt, int
            method get
            proc
                mreturn (int)mSynergyData.burnt
            endmethod
            method set
            proc
                mSynergyData.burnt = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; ID of user who favored
        ;;; </summary>
        {Range(0,99999999, ErrorMessage="ID of user who favored must be between 0 and 99999999. ")}
        public property Userid, int
            method get
            proc
                mreturn (int)mSynergyData.userid
            endmethod
            method set
            proc
                mSynergyData.userid = value
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[9]
        endmethod

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; FAVORITE.USERID (one) --> (one) --> (many) USER.ID
        ;;; </summary>
        public readwrite property REL_User, @User

.endregion

.region "Relation validation"

        ;;; <summary>
        ;;; Validate data
        ;;; </summary>
        ;;; <param name="type">Validation type (create, update or delete)</param>
        ;;; <param name="sp">Serices provider</param>
        public override method Validate, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        proc
            ;;If we have a ValidateCustom method, call it
            ValidateCustom(vType,sp)
        endmethod

        private partial method ValidateCustom, void
            required in vType, ValidationType
            required in sp, @IServiceProvider
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""

        private _KEY_USERID, string, ""
        public readonly property KEY_USERID, string, ""

.endregion

    endclass

endnamespace
