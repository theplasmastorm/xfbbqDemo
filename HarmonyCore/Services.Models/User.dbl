;;*****************************************************************************
;;
;; Title:       User.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure USER and from the data file DAT:User.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.Core.Context
import Harmony.Core.FileIO
import Microsoft.Extensions.DependencyInjection

namespace Services.Models

    public partial class User extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strUser
        private mOriginalSynergyData, strUser

        private static sMetadata, @UserMetadata

.region "Constructors"

        static method User
        proc
            sMetadata = new UserMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(User), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method User
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method User
            required in inData, a
            required in inGrfa, a
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
            mGlobalRFA = inGrfa
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID of user
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="ID of user is required. ")}
        {Range(1,99999999, ErrorMessage="ID of user must be between 1 and 99999999. ")}
        public property Id, int
            method get
            proc
                mreturn (int)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Timestamp of when the user joined
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage="Timestamp of when the user joined must be between 0 and 9999999999. ")}
        public property Joindate, long
            method get
            proc
                mreturn (long)mSynergyData.joindate
            endmethod
            method set
            proc
                mSynergyData.joindate = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Type of user
        ;;; </summary>
        {Range(0,9, ErrorMessage="Type of user must be between 0 and 9. ")}
        public property Type, int
            method get
            proc
                mreturn (int)mSynergyData.type
            endmethod
            method set
            proc
                mSynergyData.type = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Email of user
        ;;; </summary>
        {StringLength(100, ErrorMessage="Email of user cannot exceed 100 characters. ")}
        public property Email, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.email, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.email = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Timestamp of when the user last loggedin
        ;;; </summary>
        {Range(0,9999999999, ErrorMessage="Timestamp of when the user last loggedin must be between 0 and 9999999999. ")}
        public property Lastlogindate, long
            method get
            proc
                mreturn (long)mSynergyData.lastlogindate
            endmethod
            method set
            proc
                mSynergyData.lastlogindate = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Hashed password of user
        ;;; </summary>
        {StringLength(100, ErrorMessage="Hashed password of user cannot exceed 100 characters. ")}
        public property Hash, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.hash, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.hash = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Name of user
        ;;; </summary>
        {StringLength(100, ErrorMessage="Name of user cannot exceed 100 characters. ")}
        public property Name, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Recovery code of user
        ;;; </summary>
        {StringLength(100, ErrorMessage="Recovery code of user cannot exceed 100 characters. ")}
        public property Recoverycode, String
            method get
            proc
                mreturn (String)SynergyAlphaConverter.Convert(mSynergyData.recoverycode, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.recoverycode = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[8]
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""

.endregion

    endclass

endnamespace
